<?xml version="1.0"?>

<launch>
<arg name="x_pos" default="0.0"/>
<arg name="y_pos" default="0.0"/>
<arg name="z_pos" default="0.0"/>
<arg name="yaw" default="0"/>

    <arg name="robot_name" default="$(optenv SEGWAY_PLATFORM_NAME RMP_210)"/>
    
    <!-- Load the Robot Description-->
    <include file="$(find segway_description)/launch/description.launch"/>

    <!-- Include poincloud_to_laserscan if simulated Kinect is attached -->
    <group if="$(optenv SEGWAY_HAS_KINECT false)">
        <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" output="screen">

            <remap from="cloud_in" to="camera/depth/points"/>
            <remap from="scan" to="camera/scan"/>
            <rosparam>
                target_frame: base_link # Leave empty to output scan in the pointcloud frame
                tolerance: 1.0
                min_height: 0.05
                max_height: 1.0

                angle_min: -0.52 # -30.0*M_PI/180.0
                angle_max: 0.52 # 30.0*M_PI/180.0
                angle_increment: 0.005 # M_PI/360.0
                scan_time: 0.3333
                range_min: 0.45
                range_max: 4.0
                use_inf: true

                # Concurrency level, affects number of pointclouds queued for processing and number of threads used
                # 0 : Detect number of cores
                # 1 : Single threaded
                # 2->inf : Parallelism level
                concurrency_level: 1
            </rosparam>
        </node>
    </group>

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="spawn_segway_model" pkg="gazebo_ros" type="spawn_model"
    args="-urdf -model segway_robot -param robot_description -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -Y $(arg yaw)"/>
    
    <!-- Launch Segway sim ros_control -->
    <include file="$(find segway_sim_control)/launch/$(arg robot_name)_control.launch"/>

</launch>
